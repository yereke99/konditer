#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from load import bot, dp
from aiogram import types
from FormaAdmin import *
from keyboard import*
from database import*
from config import*
from Forma import*
import asyncio
from traits import*
import time
from FormaAdmin import*
from aiogram.types import InputMediaPhoto, InputMediaVideo
from traits import *
from test import *



generator = Generator()
btn = Button()
db = Database()


def calculate_sum(count):
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ –∏ —Å—É–º–º—ã
    prices = {
        1: 200,
        2: 400,
        3: 600,
        4: 800,
        5: 1000,
        10: 2000,
        25: 5000,
        50: 10000,
        100: 20000,
        250: 50000,
        500: 100000
    }
    return prices.get(count, 0)

def calculate_count(total):
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–º–µ—Ä–æ–≤ (–æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å)
    prices = {
        1: 200,
        2: 400,
        3: 600,
        4: 800,
        5: 1000,
        10: 2000,
        25: 5000,
        50: 10000,
        100: 20000,
        250: 50000,
        500: 100000
    }
    reverse_prices = {v: k for k, v in prices.items()}  # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    return reverse_prices.get(total, None)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–º–µ—Ä–æ–≤ –∏–ª–∏ None, –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞


@dp.callback_query_handler(lambda c: c.data == "buy_cinema")
async def process_buy_cinema(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    await bot.answer_callback_query(callback_query.id)

    await Forma.s1.set()


    await bot.send_message(
        callback_query.from_user.id,
        text="""*–°”ô–ª–µ–º–∞—Ç—Å—ã–∑–±–∞, –•–ê–ô–´–†–õ–´ –ë–Ü–õ–Ü–ú –ë–û–õ–°–´–ù,–∞–ª—Ç—ã–Ω –∏–µ—Å—ñ!‚ù§Ô∏è

–ù–µ–±”ô—Ä—ñ 50 –¢–ï“¢–ì–ï–ú–ï–ùüò±
“ö–û–ú–ê“ö–¢–´ –ê–õ–¢–´–ù–î–ê–†–î–´“¢ –ò–ï–°–Ü –ë–û–õ–£ “Æ–®–Ü–ù –î”ò–õ “ö–ê–ó–Ü–† –¢–ï–ó–Ü–†–ï–öüëáüèª

1 –Ω–æ–º–µ—Ä = 50 —Ç–≥
10 –Ω–æ–º–µ—Ä = 500 —Ç–≥
20 –Ω–æ–º–µ—Ä = 1000 —Ç–≥
50 –Ω–æ–º–µ—Ä = 2500 —Ç–≥
100 –Ω–æ–º–µ—Ä = 5000 —Ç–≥
200 –Ω–æ–º–µ—Ä = 10000 —Ç–≥
500 –Ω–æ–º–µ—Ä = 25000 —Ç–≥

”®–∑—ñ“£—ñ–∑–≥–µ —Ç–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç—Ç–µ—Ä—ñ–Ω “Ø–π—Ä–µ–Ω–µ –æ—Ç—ã—Ä–∞, –∞–ª—Ç—ã–Ω–¥–∞—Ä–¥—ã“£ –∏–µ—Å—ñ –±–æ–ª—ã“£—ã–∑.
–°–∞–Ω–∞—É–ª—ã –∫“Ø–Ω–¥–µ –∏–µ—Å—ñ–Ω –∞–Ω—ã“õ—Ç–∞–π–º—ã–∑,
–º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä–º–µ“£—ñ–∑‚úÖ

–ù–æ–º–µ—Ä–æ–∫ –∞–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ
‚Äú–ö–£–†–° –°–ê–¢–´–ü –ê–õ–£‚Äù –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑–¥–∞—Ä, —Å”ô—Ç—Ç—ñ–ª—ñ–∫ü´∂üèª*""",
        parse_mode="Markdown",
        reply_markup=btn.digits_and_cancel()
    ) 
  

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def get_file_id(message: types.Message):
    
    file_id = message.photo[-1].file_id
    await message.reply(f"File ID: {file_id}")

@dp.message_handler(content_types=types.ContentType.VIDEO)
async def get_video_file_id(message: types.Message):
    
    file_id = message.video.file_id
    await message.reply(f"File ID: {file_id}")

@dp.message_handler(commands=['sends'])
async def send_to_channel(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª
    """

    FILE_ID = "AgACAgIAAxkBAAEHIfxnc7OGRQ4GbSTbzZFBo9XqARJqFQACle0xG88MmEsp14c5jjPkzQEAAwIAA3kAAzYE"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await bot.send_photo(
            chat_id="@kenbaeva_ai",
            photo=FILE_ID,
            caption="""“ö“∞–†–ú–ï–¢–¢–Ü –ö”®–†–ï–†–ú–ï–ù–î–ï–† –¢–Ü–ö–ï–õ–ï–ô –≠–§–ò–†–î–ï üí≥ –¢”®–õ–ï–ú –ñ–ê–°–ê–£ –ñ“Æ–ô–ï–°–Ü –ê–®–´“ö!\n\n–û—Å—ã —Ç—ñ–∫–µ–ª–µ–π —ç—Ñ–∏—Ä–¥–µ —Å—ñ–∑–¥–µ—Ä–≥–µ üéÅ —Å—ã–π–ª—ã“õ—Ç–∞—Ä—ã–º—ã–∑–¥—ã –±–µ—Ä–µ—Ç—ñ–Ω –±–æ–ª–∞–º—ã–∑!""",
            protect_content=True,
            reply_markup=btn.tg_link()
        )
        await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")



@dp.message_handler(commands=['get_last_message'])
async def get_last_message_handler(message: types.Message):
    try:
        # Use the current chat ID from the message
        chat_id = message.chat.id

        # Fetch the chat details
        chat_info = await bot.get_chat(chat_id)

        # Fetch the most recent messages using bot.get_updates workaround
        updates = await bot.get_updates(limit=1000)

        # Extract message from the update
        if updates and updates[0].message:
            last_msg = updates[0].message
            last_message_id = last_msg.message_id
            last_message_text = last_msg.text or "<No text content>"

            # Send the message ID and text to the user
            await message.answer(
                f"Chat Title: {chat_info.title}\n"
                f"Message ID: {last_message_id}\n"
                f"Text: {last_message_text}"
            )
        else:
            await message.answer("No recent messages found in this chat.")

    except Exception as e:
        await message.answer(f"An error occurred: {e}")


@dp.message_handler(commands=['admin'])
async def handler(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

message_history = {
    800703982: {
        2: "Your last message here."
    }
}

user_message_history = {}

def store_message(user_id, message_id, text):
    if user_id not in user_message_history:
        user_message_history[user_id] = deque(maxlen=10)
    user_message_history[user_id].appendleft((message_id, text))

async def get_last_10_messages(user_id):
    return user_message_history.get(user_id, [])

@dp.message_handler(commands=['last'])
async def send_last_messages(message: types.Message):
    user_id = message.from_user.id
    last_messages = await get_last_10_messages(user_id)
    
    if last_messages:
        response = "\n".join([f"Message ID: {msg_id}, Text: {msg_text}" for msg_id, msg_text in last_messages])
    else:
        response = "No messages found."
    
    await bot.send_message(user_id, response)  
        
@dp.message_handler(commands=['start', 'go'])
async def start_handler(message: types.Message):
    print(message.from_user.id)
      
    from datetime import datetime
    fileId = "BAACAgIAAxkBAAEgsFNoq046ayvXFIn-aAd_wcGUKE0SBgACRYYAAstNWUme-qYmGIRnwjYE"

    user_id = message.from_user.id
    user_name = f"@{message.from_user.username}"
    time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    db.JustInsert(user_id, user_name, time_now)  
    
    if db.CheckUserPaid(message.from_user.id) == True:
        await bot.send_video(
            message.from_user.id,
            fileId,
            caption="""*–°”ô–ª–µ–º–∞—Ç—Å—ã–∑–±–∞, –•–ê–ô–´–†–õ–´ –ë–Ü–õ–Ü–ú –ë–û–õ–°–´–ù,–∞–ª—Ç—ã–Ω –∏–µ—Å—ñ!‚ù§Ô∏è

–ù–µ–±”ô—Ä—ñ 50 –¢–ï“¢–ì–ï–ú–ï–ùüò±
“ö–û–ú–ê“ö–¢–´ –ê–õ–¢–´–ù–î–ê–†–î–´“¢ –ò–ï–°–Ü –ë–û–õ–£ “Æ–®–Ü–ù –î”ò–õ “ö–ê–ó–Ü–† –¢–ï–ó–Ü–†–ï–öüëáüèª

1 –Ω–æ–º–µ—Ä = 50 —Ç–≥
10 –Ω–æ–º–µ—Ä = 500 —Ç–≥
20 –Ω–æ–º–µ—Ä = 1000 —Ç–≥
50 –Ω–æ–º–µ—Ä = 2500 —Ç–≥
100 –Ω–æ–º–µ—Ä = 5000 —Ç–≥
200 –Ω–æ–º–µ—Ä = 10000 —Ç–≥
500 –Ω–æ–º–µ—Ä = 25000 —Ç–≥

”®–∑—ñ“£—ñ–∑–≥–µ —Ç–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç—Ç–µ—Ä—ñ–Ω “Ø–π—Ä–µ–Ω–µ –æ—Ç—ã—Ä–∞, –∞–ª—Ç—ã–Ω–¥–∞—Ä–¥—ã“£ –∏–µ—Å—ñ –±–æ–ª—ã“£—ã–∑.
–°–∞–Ω–∞—É–ª—ã –∫“Ø–Ω–¥–µ –∏–µ—Å—ñ–Ω –∞–Ω—ã“õ—Ç–∞–π–º—ã–∑,
–º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä–º–µ“£—ñ–∑‚úÖ

–ù–æ–º–µ—Ä–æ–∫ –∞–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ
‚Äú–ö–£–†–° –°–ê–¢–´–ü –ê–õ–£‚Äù –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑–¥–∞—Ä, —Å”ô—Ç—Ç—ñ–ª—ñ–∫ü´∂üèª*""",
            parse_mode="Markdown",
            protect_content=True,
            reply_markup=btn.menu(),
        )
        return

    await bot.send_video(
        message.from_user.id,
        fileId,
        caption="""*–°”ô–ª–µ–º–∞—Ç—Å—ã–∑–±–∞, –•–ê–ô–´–†–õ–´ –ë–Ü–õ–Ü–ú –ë–û–õ–°–´–ù,–∞–ª—Ç—ã–Ω –∏–µ—Å—ñ!‚ù§Ô∏è

–ù–µ–±”ô—Ä—ñ 50 –¢–ï“¢–ì–ï–ú–ï–ùüò±
“ö–û–ú–ê“ö–¢–´ –ê–õ–¢–´–ù–î–ê–†–î–´“¢ –ò–ï–°–Ü –ë–û–õ–£ “Æ–®–Ü–ù –î”ò–õ “ö–ê–ó–Ü–† –¢–ï–ó–Ü–†–ï–öüëáüèª

1 –Ω–æ–º–µ—Ä = 50 —Ç–≥
10 –Ω–æ–º–µ—Ä = 500 —Ç–≥
20 –Ω–æ–º–µ—Ä = 1000 —Ç–≥
50 –Ω–æ–º–µ—Ä = 2500 —Ç–≥
100 –Ω–æ–º–µ—Ä = 5000 —Ç–≥
200 –Ω–æ–º–µ—Ä = 10000 —Ç–≥
500 –Ω–æ–º–µ—Ä = 25000 —Ç–≥

”®–∑—ñ“£—ñ–∑–≥–µ —Ç–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç—Ç–µ—Ä—ñ–Ω “Ø–π—Ä–µ–Ω–µ –æ—Ç—ã—Ä–∞, –∞–ª—Ç—ã–Ω–¥–∞—Ä–¥—ã“£ –∏–µ—Å—ñ –±–æ–ª—ã“£—ã–∑.
–°–∞–Ω–∞—É–ª—ã –∫“Ø–Ω–¥–µ –∏–µ—Å—ñ–Ω –∞–Ω—ã“õ—Ç–∞–π–º—ã–∑,
–º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ“£—ñ–∑–¥—ñ –∂—ñ–±–µ—Ä–º–µ“£—ñ–∑‚úÖ

–ù–æ–º–µ—Ä–æ–∫ –∞–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ
‚Äú–ö–£–†–° –°–ê–¢–´–ü –ê–õ–£‚Äù –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑–¥–∞—Ä, —Å”ô—Ç—Ç—ñ–ª—ñ–∫ü´∂üèª*""",        
        parse_mode="Markdown",
        protect_content=True,
        reply_markup=btn.buy_cinema(),
    )

    
"""             
@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.DOCUMENT])
async def media_handler(message: types.Message, state: FSMContext):
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.content_type == 'photo':
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        # –ü–æ–ª—É—á–∞–µ–º file_id –≤–∏–¥–µ–æ
        file_id = message.video.file_id
    elif message.content_type == 'document':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç PDF —Ñ–∞–π–ª–æ–º
        if message.document.mime_type == 'application/pdf':
            # –ü–æ–ª—É—á–∞–µ–º file_id –¥–ª—è PDF —Ñ–∞–π–ª–∞
            file_id = message.document.file_id
        else:
            # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ PDF, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await bot.send_message(
                message.from_user.id,
                text="–û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª.",
            )
            return

    if file_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        async with state.proxy() as data:
            data['file_id'] = file_id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º file_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            message.from_user.id,
            text=f"*FileID: {data['file_id']}*",
            parse_mode="Markdown",
        )
    else:
        await bot.send_message(
            message.from_user.id,
            text="–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞.",
        )  """

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def pdf_received_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî —ç—Ç–æ PDF
    if message.document.mime_type == 'application/pdf':
        document = message.document

        # Generate a unique filename
        user_id = message.from_user.id
        timestamp = int(time.time())
        random_int = Generator.generate_random_int()
        file_name = f"{user_id}_{timestamp}_{random_int}.pdf"
        file_path = os.path.join('./pdf/', file_name)

        # Download the PDF file
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, file_path)

        # Process the PDF file
        pdf_reader = PDFReaders(file_path)
        pdf_reader.open_pdf()
        #result = pdf_reader.extract_specific_info()
        result = pdf_reader.extract_detailed_info()
        pdf_reader.close_pdf()

        

        print(result)
        print(len(result))


        async with state.proxy() as data:
            data['data'] = message.text
            data['pdf_result'] = result
            data['fileName'] = file_name
            data['len'] = len(result)
            if data['length'] == 16:
                print("here")
                data['count'] = calculate_count(convert_currency_to_int(result[3]))
                sum = calculate_sum(data['count'])
                data['sum'] = sum
                print(data['sum'])
            elif data['length'] == 8:
                data['count'] = calculate_count(convert_currency_to_int(result[1]))
                sum = calculate_sum(data['count'])
                data['sum'] = sum
                print(data['sum'])


        if data['length'] == 16:
            print(f"Expected sum: {data['sum']}, Actual sum: {convert_currency_to_int(data['pdf_result'][3])}")

            if convert_currency_to_int(data['pdf_result'][3]) != data['sum']: 
                await bot.send_message(
                    message.from_user.id,
                    text="*–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ “õ–∞—Ç–µ!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu()
                ) 
                return

            
            print(data['pdf_result'][3])
            print(data['pdf_result'][10])
        
            if data['pdf_result'][11] == "–°–∞—Ç—É—à—ã–Ω—ã“£ –ñ–°–ù/–ë–°–ù 020319550979" or data['pdf_result'][10] == "–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ 020319550979":
                print(db.CheckLoto(data['pdf_result'][6]))
                if db.CheckLoto(data['pdf_result'][6]) == True:
                    await bot.send_message(
                        message.from_user.id,
                        text="*–ß–ï–ö –¢”®–õ–ï–ù–Ü–ü “ö–û–ô–´–õ“í–ê–ù!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                        parse_mode="Markdown",
                        reply_markup=btn.menu()
                    )   
                    return

                await Forma.s3.set()
                await bot.send_message(
                    message.from_user.id,
                    text="*–°—ñ–∑–±–µ–Ω –∫–µ—Ä—ñ üì≤ –±–∞–π–ª–∞–Ω—ã—Å“õ–∞ —à—ã“ì—É “Ø—à—ñ–Ω –±–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑! –¢”©–º–µ–Ω–¥–µ —Ç“±—Ä“ì–∞–Ω \n\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ñ–º–µ–Ω –±”©–ª—ñ—Å—É –∫–Ω–æ–ø–∫–∞—Å—ã–Ω –±–∞—Å—ã–Ω—ã–∑\n\n–ï–®“ö–ê–®–ê–ù –°–ê–ù–î–ê–†–ú–ï–ù –ñ–ê–ó–ë–ê–ô–ú–´–ó ‚ÄºÔ∏è*",
                    parse_mode="Markdown",
                    reply_markup=btn.send_contact()
                )
                return
            else:
                await bot.send_message(
                    message.from_user.id,
                    text="*–î“±—Ä—ã—Å –µ–º–µ—Å —Å—á–µ—Ç“õ–∞ —Ç”©–ª–µ–¥—ñ“£—ñ–∑!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu_not_paid()
                )
        elif data['length'] == 8:
            print(f"Expected sum: {data['sum']}, Actual sum: {convert_currency_to_int(data['pdf_result'][1])}")

            if convert_currency_to_int(data['pdf_result'][1]) != data['sum']: 
                await bot.send_message(
                    message.from_user.id,
                    text="*–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ “õ–∞—Ç–µ!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu()
                ) 
                return

            
            print(data['pdf_result'][1])
            print(data['pdf_result'][3])
        
            if data['pdf_result'][3] == "–°–∞—Ç—É—à—ã–Ω—ã“£ –ñ–°–ù/–ë–°–ù 020319550979" or data['pdf_result'][3] == "–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ 020319550979":
                print(db.CheckLoto(data['pdf_result'][2]))
                if db.CheckLoto(data['pdf_result'][2]) == True:
                    await bot.send_message(
                        message.from_user.id,
                        text="*–ß–ï–ö –¢”®–õ–ï–ù–Ü–ü “ö–û–ô–´–õ“í–ê–ù!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                        parse_mode="Markdown",
                        reply_markup=btn.menu()
                    )   
                    return

                await Forma.s3.set()
                await bot.send_message(
                    message.from_user.id,
                    text="*–°—ñ–∑–±–µ–Ω –∫–µ—Ä—ñ üì≤ –±–∞–π–ª–∞–Ω—ã—Å“õ–∞ —à—ã“ì—É “Ø—à—ñ–Ω –±–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑! –¢”©–º–µ–Ω–¥–µ —Ç“±—Ä“ì–∞–Ω \n\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ñ–º–µ–Ω –±”©–ª—ñ—Å—É –∫–Ω–æ–ø–∫–∞—Å—ã–Ω –±–∞—Å—ã–Ω—ã–∑\n\n–ï–®“ö–ê–®–ê–ù –°–ê–ù–î–ê–†–ú–ï–ù –ñ–ê–ó–ë–ê–ô–ú–´–ó ‚ÄºÔ∏è*",
                    parse_mode="Markdown",
                    reply_markup=btn.send_contact()
                )
            else:
                await bot.send_message(
                    message.from_user.id,
                    text="*–î“±—Ä—ã—Å –µ–º–µ—Å —Å—á–µ—Ç“õ–∞ —Ç”©–ª–µ–¥—ñ“£—ñ–∑!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                    parse_mode="Markdown",
                    reply_markup=btn.menu_not_paid()
                )  

    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ PDF-—Ñ–∞–π–ª, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–¢–µ–∫, PDF —Ñ–∞–π–ª –∂—ñ–±–µ—Ä—É –∫–µ—Ä–µ–∫!")


@dp.message_handler(Text(equals="üé• –ë–µ–π–Ω–µ –∫—É—Ä—Å—Ç–∞—Ä"), content_types=['text'])
async def handler(message: types.Message):

    file_id = "BAACAgIAAxkBAAIMsGYOfL6V-0jAR11JZUN9v2NrKV-8AALORQAC_NNxSKAE1UMhWlFeNAQ"     

    await bot.send_video(message.from_user.id, file_id, protect_content=True)

    await bot.send_message(
        message.from_user.id,
        text="""*–í–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏—è–ª–¥–∞“ì—ã —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑!\n –°“±—Ä–∞“õ—Ç–∞—Ä —Å–∞–Ω—ã 5\n–°“±—Ä–∞“õ—Ç–∞—Ä 1 ...*""",
        parse_mode="Markdown",
        reply_markup=btn.cancel()
    ) 

@dp.message_handler(commands=['help'])
@dp.message_handler(Text(equals="üì≤ –ë–∞–π–ª–∞–Ω—ã—Å –Ω–æ–º–µ—Ä—ñ"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*https://wa.me/+77769001919*""",
        parse_mode="Markdown",
    ) 


@dp.message_handler(Text(equals="üìπ –ö—É—Ä—Å –±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):
    
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        # –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_group_1 = [
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJAFnRLiWe2sW6uzMSxdQR5Vv5BvsjgACkuIxG-J2KErj-vWtMknO6gEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMOZyqe_nfopY8Q5-1w_WeTC7154m8AAjlnAAK60lFJ6L_NUPBTXrQ2BA", caption="*–î—É–±–∞–π—Å–∫–∏–π —á–∏–∑–∫–µ–π–∫*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJANnRLieK-yegn4D4YTwfRiwsVLybAACk-IxG-J2KEr7BBNKvstEBwEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMQZyqfeZNNl5pHS26pJUFDMqCBz-EAAjpnAAK60lFJkWKyJ47LKKc2BA", caption="*–ë–∞–Ω–æ—Ñ—Ñ–∏–ø–∞–π –¢–∞—Ä—Ç–∞–ª–µ—Ç–∫–∏*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBI_9nRLiO9Er8tsQ2SC1PPzRdEuJtwwACkeIxG-J2KErviLNZvNeEbAEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMSZyqfo_h18m4nswMZ1s39vYVw9zYAAjtnAAK60lFJvOXjvcm9ESM2BA", caption="*–î—É–±–∞–π—Å–∫–∏–π —à–æ–∫–æ–ª–∞–¥*", parse_mode="Markdown", protect_content=True)
        ]

        # –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_group_2 = [
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJAVnRLiml_0Ps-gBE1SKEMqGud1XMwAClOIxG-J2KEo_QVeUpEFE_QEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMUZyqgEINrfKiWiimkNEzKijzyDZIAAj1nAAK60lFJbBRFB-tfEUQ2BA", caption="*–¢–∞—Ä—ã–º–µ–Ω —á–∏–∑–∫–µ–π–∫*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBI_9nRLiO9Er8tsQ2SC1PPzRdEuJtwwACkeIxG-J2KErviLNZvNeEbAEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMWZyqgkGfWka-1f_eWUNiyI8f81rwAAj5nAAK60lFJVlhlilAwuYo2BA", caption="*–ù—É—Ç–µ–ª–ª–∞ —Ç–æ—Ä—Ç*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJAdnRLisUDCzKv9zENjo9nz1kxZnoQACleIxG-J2KEqxP87JjThz1gEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMYZyqg2oywORWXAAEISx_bnPWMnHdqAAI_ZwACutJRSSPOQsKLE7CaNgQ", caption="*Milka —Ç–æ—Ä—Ç*", parse_mode="Markdown", protect_content=True)
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media_group_1,
            protect_content=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media_group_2,
            protect_content=True
        )

        successful, failed = await ForwardMessage(file_id, user_ids, file_type, caption)
        await bot.send_message(admin, text=f"–°”ô—Ç—Ç—ñ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ: {successful} “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞\n“ö–∞—Ç–µ–ª—ñ–∫ –±–æ–ª–¥—ã: {failed} “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞", reply_markup=btn.menu())
    


@dp.message_handler(Text(equals="üí∏ Money"), content_types=['text'])
async def handler(message: types.Message):
    
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        sum = db.get_money_sum()
        await bot.send_message(
                message.from_user.id,
                text="""*üí≥ –ñ–∞–ª–ø—ã “õ–∞—Ä–∞–∂–∞—Ç: %d*"""%sum,
                parse_mode="Markdown",
                reply_markup=btn.admin()
            )    

@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await FormaAdmin.s1.set()
        await bot.send_message(
                message.from_user.id,
                text="""*‚úèÔ∏è –•–∞–±–∞—Ä–ª–∞–º–∞ —Ç–∏–ø—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑*""",
                parse_mode="Markdown",
                reply_markup=btn.typeMsg()
            )     


@dp.message_handler(Text(equals="üì® ”ò–∫—ñ–º—à—ñ–≥–µ —Ö–∞–±–∞—Ä–ª–∞–º–∞"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*@senior_coffee_drinker +77769001919*\n""",
        parse_mode="Markdown",
    ) 


@dp.message_handler(commands=['buy'])
@dp.message_handler(Text(equals="üìπ “ö–∞–π—Ç–∞–¥–∞–Ω üìó –∫—É—Ä—Å —Å–∞—Ç—ã–ø –∞–ª—É"), content_types=['text'])
async def handler(message: types.Message):
    
    await Forma.s1.set()
    await bot.send_message(
            message.from_user.id,
            text="""“ö–∞–Ω—à–∞ –Ω–æ–º–µ—Ä–æ–∫ –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?
–¶–∏—Ñ—Ä–º–µ–Ω –∂–∞–∑—ã“£—ã–∑üëáüèª
–ù–æ–º–µ—Ä–æ–∫ –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω –∫—É—Ä—Å“õ–∞
–¥–æ—Å—Ç—É–ø –∫”©–±–µ–π–µ–¥—ñ, –∂”ô–Ω–µ –∑–µ—Ä–≥–µ—Ä–ª—ñ–∫ –±“±–π—ã–º –∏–µ—Å—ñ –±–æ–ª—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ –∂–æ“ì–∞—Ä—ãüî•""",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
    )

"""
# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF-—Ñ–∞–π–ª–∞
@dp.message_handler(content_types=types.ContentType.DOCUMENT, state='*')
async def pdf_received_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ‚Äî —ç—Ç–æ PDF
    if message.document.mime_type == 'application/pdf':
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Forma.s1
        await Forma.s1.set()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "“ö–∞–π—Ç–∞–¥–∞–Ω –∫–∏–Ω–æ–Ω—ã —Å–∞—Ç—ã–ø –∞–ª—É"
        await bot.send_message(
            message.from_user.id,
            text="*–ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω –∂“Ø–ª–¥–µ–Ω—ñ “±—Ç—É üìà —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã —Å–æ“ì—ã—Ä–ª—ã–º –∂–æ“ì–∞—Ä—ã üòâüëå*",
            parse_mode="Markdown",
        )
        await bot.send_message(
            message.from_user.id,
            text="*“ö–∞–Ω—à–∞ –±–∏–ª–µ—Ç –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ? –ë–∏–ª–µ—Ç —Å–∞–Ω—ã –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω “±—Ç—ã—Å—Ç–∞ –∂–µ“£—É —ã“õ—Ç–∏–º–∞–ª–¥—ã“ì—ã –∂–æ“ì–∞—Ä—ã üòâ*",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
        )
    else:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ PDF-—Ñ–∞–π–ª, –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.reply("–¢–µ–∫, PDF —Ñ–∞–π–ª –∂—ñ–±–µ—Ä—É –∫–µ—Ä–µ–∫!")
    
"""

@dp.message_handler(Text(equals="üé¨ –ö–∏–Ω–æ–Ω—ã —Å–∞—Ç—ã–ø –∞–ª—É"), content_types=['text'])
async def handler(message: types.Message):
    
    await Forma.s1.set()
    await bot.send_message(
            message.from_user.id,
            text="""*“ö–∞–Ω—à–∞ –Ω–æ–º–µ—Ä–æ–∫ –∞–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ–¥—ñ?
–¶–∏—Ñ—Ä–º–µ–Ω –∂–∞–∑—ã“£—ã–∑üëáüèª
–ù–æ–º–µ—Ä–æ–∫ –∫”©–ø –±–æ–ª“ì–∞–Ω —Å–∞–π—ã–Ω –∫—É—Ä—Å“õ–∞
–¥–æ—Å—Ç—É–ø –∫”©–±–µ–π–µ–¥—ñ, –∂”ô–Ω–µ –∑–µ—Ä–≥–µ—Ä–ª—ñ–∫ –±“±–π—ã–º –∏–µ—Å—ñ –±–æ–ª—É –º“Ø–º–∫—ñ–Ω–¥—ñ–≥—ñ –∂–æ“ì–∞—Ä—ãüî•*""",
            parse_mode="Markdown",
            reply_markup=btn.digits_and_cancel()
    ) 
    

@dp.message_handler(Text(equals="üìë –õ–æ—Ç–æ"), content_types=['text'])
async def send_just_excel(message: types.Message):
    if message.from_user.id == admin or admin2 or admin3:
        db.create_loto_excel('./excell/loto.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/loto.xlsx', 'rb'))

@dp.message_handler(Text(equals="üë• “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã"), content_types=['text'])
async def send_client_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        db.create_client_excel('./excell/clients.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/clients.xlsx', 'rb'))

@dp.message_handler(Text(equals="üëá Just Clicked"), content_types=['text'])
async def send_loto_excel(message: types.Message):
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        db.create_just_excel('./excell/just_users.xlsx')
        await bot.send_document(message.from_user.id, open('./excell/just_users.xlsx', 'rb'))
    


@dp.message_handler(Text(equals="üì® –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É"), content_types=['text'])
async def handler(message: types.Message):

    await bot.send_message(
        message.from_user.id,
        text="""*@senior_coffee_drinker*""",
        parse_mode="Markdown",
        reply_markup=btn.admin()
    ) 

@dp.message_handler(commands=['mytickets'])
@dp.message_handler(Text(equals="üßß “∞—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ–º"), content_types=['text'])
async def handler(message: types.Message):

    id_user = message.from_user.id            # Get the user ID from the message
    loto_ids = db.FetchIdLotoByUser(id_user)  # Fetch the list of id_loto for this user
    
    if loto_ids:
        ids_formatted = ", ".join(map(str, loto_ids))  # Format the list as a comma-separated string
        response_text = f"–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—Ç–µ—Ä—ñ“£—ñ–∑–¥—ñ“£ ID-–ª–∞—Ä—ã: {ids_formatted}"
    else:
        response_text = "–°—ñ–∑–¥—ñ“£ “±—Ç—ã—Å –±–∏–ª–µ—Ç—ñ“£—ñ–∑ –∂–æ“õ."

    await bot.send_message(
        message.from_user.id,
        text=response_text,
        parse_mode="Markdown",
        reply_markup=btn.menu()
    )


@dp.message_handler(commands=['subjects'])
@dp.message_handler(Text(equals="üìπ –ö—É—Ä—Å —Å–∞–±–∞“õ—Ç–∞—Ä—ã"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id == admin or admin2:
        # –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_group_1 = [
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJAFnRLiWe2sW6uzMSxdQR5Vv5BvsjgACkuIxG-J2KErj-vWtMknO6gEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMOZyqe_nfopY8Q5-1w_WeTC7154m8AAjlnAAK60lFJ6L_NUPBTXrQ2BA", caption="*–î—É–±–∞–π—Å–∫–∏–π —á–∏–∑–∫–µ–π–∫*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJANnRLieK-yegn4D4YTwfRiwsVLybAACk-IxG-J2KEr7BBNKvstEBwEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMQZyqfeZNNl5pHS26pJUFDMqCBz-EAAjpnAAK60lFJkWKyJ47LKKc2BA", caption="*–ë–∞–Ω–æ—Ñ—Ñ–∏–ø–∞–π –¢–∞—Ä—Ç–∞–ª–µ—Ç–∫–∏*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBSLdnRygJHAxJWDkMQMZkSAGVc0HZuwACkOIxG-J2KEq4KuUTfT-0hwEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMSZyqfo_h18m4nswMZ1s39vYVw9zYAAjtnAAK60lFJvOXjvcm9ESM2BA", caption="*–î—É–±–∞–π—Å–∫–∏–π —à–æ–∫–æ–ª–∞–¥*", parse_mode="Markdown", protect_content=True)
        ]

        # –í—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        media_group_2 = [
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJAVnRLiml_0Ps-gBE1SKEMqGud1XMwAClOIxG-J2KEo_QVeUpEFE_QEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMUZyqgEINrfKiWiimkNEzKijzyDZIAAj1nAAK60lFJbBRFB-tfEUQ2BA", caption="*–¢–∞—Ä—ã–º–µ–Ω —á–∏–∑–∫–µ–π–∫*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBI_9nRLiO9Er8tsQ2SC1PPzRdEuJtwwACkeIxG-J2KErviLNZvNeEbAEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMWZyqgkGfWka-1f_eWUNiyI8f81rwAAj5nAAK60lFJVlhlilAwuYo2BA", caption="*–ù—É—Ç–µ–ª–ª–∞ —Ç–æ—Ä—Ç*", parse_mode="Markdown", protect_content=True),
            InputMediaPhoto(media="AgACAgIAAxkBAAEBJAdnRLisUDCzKv9zENjo9nz1kxZnoQACleIxG-J2KEqxP87JjThz1gEAAwIAA3kAAzYE", protect_content=True),
            InputMediaVideo(media="BAACAgIAAxkBAAMYZyqg2oywORWXAAEISx_bnPWMnHdqAAI_ZwACutJRSSPOQsKLE7CaNgQ", caption="*Milka —Ç–æ—Ä—Ç*", parse_mode="Markdown", protect_content=True)
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media_group_1,
            protect_content=True
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –≥—Ä—É–ø–ø—É –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media_group_2,
            protect_content=True
        )
        return

    if db.CheckUserPaid(message.from_user.id):
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media_group_1,
            protect_content=True
        )

        await bot.send_media_group(
            chat_id=message.from_user.id,
            media=media_group_2,
            protect_content=True
        )
    else:
        await bot.send_message(
            message.from_user.id,
            text="–ö—É—Ä—Å—Ç—ã —Å–∞—Ç—ã–ø –∞–ª—ã“£—ã–∑!.",
            reply_markup=btn.buy_cinema()
        )
  

@dp.message_handler(commands=['gift'])
@dp.message_handler(Text(equals="üéÅ –°—ã–π–ª—ã“õ—Ç–∞—Ä"), content_types=['text'])
async def handler(message: types.Message):
    print(message.from_user.id)
    if message.from_user.id == admin or message.from_user.id == admin2 or message.from_user.id == admin3:
        await bot.send_message(
        message.from_user.id,
        text="üòä *üéÅ –°—ã–π–ª—ã“õ—Ç–∞—Ä*",
        parse_mode="Markdown",
        reply_markup=btn.gift()
    )

@dp.message_handler(Text(equals="üéÅ 1-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # –ü–æ–ª—É—á–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞
        current_entries = entries
        for i, step in enumerate(steps):
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 50 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–∞–ø–∞
            for chunk in split_message(text):
                sent_message = await bot.send_message(
                    message.from_user.id,
                    text=chunk,
                    reply_markup=btn.gift()
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø
                if i < len(steps) - 1:
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)
 


@dp.message_handler(Text(equals="üéÅ 2-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # –ü–æ–ª—É—á–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞
        current_entries = entries
        for i, step in enumerate(steps):
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 50 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–∞–ø–∞
            for chunk in split_message(text):
                sent_message = await bot.send_message(
                    message.from_user.id,
                    text=chunk,
                    reply_markup=btn.gift()
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø
                if i < len(steps) - 1:
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)


@dp.message_handler(Text(equals="üéÅ 3-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # –ü–æ–ª—É—á–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞
        current_entries = entries
        for i, step in enumerate(steps):
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 50 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–∞–ø–∞
            for chunk in split_message(text):
                sent_message = await bot.send_message(
                    message.from_user.id,
                    text=chunk,
                    reply_markup=btn.gift()
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø
                if i < len(steps) - 1:
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)

@dp.message_handler(Text(equals="üéÅ 4-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # –ü–æ–ª—É—á–∞–µ–º 100 –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ 100 –∑–∞–ø–∏—Å–µ–π –∫–∞–∫ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞
        current_entries = entries
        for i, step in enumerate(steps):
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 50 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–∞–ø–∞
            for chunk in split_message(text):
                sent_message = await bot.send_message(
                    message.from_user.id,
                    text=chunk,
                    reply_markup=btn.gift()
                )
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø
                if i < len(steps) - 1:
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)



@dp.message_handler(Text(equals="üéÅ 5-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  

@dp.message_handler(Text(equals="üéÅ 6-—à—ã —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  

@dp.message_handler(Text(equals="üéÅ 7-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  



@dp.message_handler(Text(equals="üéÅ 8-—à—ñ —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  


@dp.message_handler(Text(equals="üéÅ 9-—à—ã —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)  

@dp.message_handler(Text(equals="üéÅ 10-—à—ã —Å—ã–π–ª—ã“õ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ 100 000 —Ç–µ“£–≥–µ\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5) 

@dp.message_handler(Text(equals="‚óÄÔ∏è –ö–µ—Ä—ñ"), content_types=['text'])
async def handler(message: types.Message):

    if message.from_user.id == admin or message.from_user.id == admin2:
        await bot.send_message(
        message.from_user.id,
        text="üòä *–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ %s !\n–°—ñ–∑–¥—ñ“£ —Å—Ç–∞—Ç—É—Å—ã“£—ã–∑ üë§ –ê–¥–º–∏–Ω(-–∫–∞-)*"%message.from_user.first_name,
        parse_mode="Markdown",
        reply_markup=btn.admin()
    )

async def send_pdf_with_caption(user_id, id_loto, caption):
    loto_info = db.fetch_loto_by_id(id_loto)
    if not loto_info:
        await bot.send_message(user_id, text="PDF not found.")
        return

    receipt = loto_info[3]  # Adjusted index for receipt column
    pdf_path = f"/home/cinema/pdf/{receipt}"
    
    if os.path.exists(pdf_path):
        await bot.send_document(
            user_id,
            document=open(pdf_path, 'rb'),
            caption=caption,
            reply_markup=btn.gift()
        )
    else:
        await bot.send_message(user_id, text="PDF file not found.")



#
@dp.message_handler(Text(equals="üéÅ üöó –ö”©–ª—ñ–∫"), content_types=['text'])
async def handler(message: types.Message):
    if message.from_user.id in [admin, admin2, admin3]:
        steps = [50, 25, 10, 1]
        
        # Fetch 100 entries initially
        entries = db.fetch_random_loto_car(100)
        if not entries:
            await bot.send_message(
                message.from_user.id,
                text="No data available.",
                reply_markup=btn.gift()
            )
            return
        
        # Send the first 100 entries as one message
        first_batch = entries[:100]
        text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in first_batch])
        for chunk in split_message(text):
            sent_message = await bot.send_message(
                message.from_user.id,
                text=chunk,
                reply_markup=btn.gift()
            )
            await asyncio.sleep(2)
            await bot.delete_message(message.from_user.id, sent_message.message_id)
        
        # Process subsequent steps by selecting random subsets
        current_entries = entries
        for step in steps:
            current_entries = random.sample(current_entries, step)
            if step == 1:
                row = current_entries[0]
                text = f"üéÅ üöó –ö”©–ª—ñ–∫\n\nID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}"
                await send_pdf_with_caption(message.from_user.id, row[0], text)
            else:
                text = "\n\n".join([f"ID Loto: {row[0]}\nContact: {row[1]}\nData Pay: {row[2]}" for row in current_entries])
                for chunk in split_message(text):
                    sent_message = await bot.send_message(
                        message.from_user.id,
                        text=chunk,
                        reply_markup=btn.gift()
                    )
                    await asyncio.sleep(5)
                    await bot.delete_message(message.from_user.id, sent_message.message_id)
            
            await asyncio.sleep(0.5)




async def send_pdf_with_caption(user_id, id_loto, caption):
    loto_info = db.fetch_loto_by_id(id_loto)
    if not loto_info:
        await bot.send_message(user_id, text="PDF not found.")
        return

    receipt = loto_info[3]  # Adjusted index for receipt column
    pdf_path = f"/home/konditer/pdf/{receipt}"
    
    if os.path.exists(pdf_path):
        await bot.send_document(
            user_id,
            document=open(pdf_path, 'rb'),
            caption=caption,
            reply_markup=btn.gift()
        )
    else:
        await bot.send_message(user_id, text="PDF file not found.")

from aiogram.types import InputFile


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
def find_pdf_file(file_name: str) -> str:
    directories = ["/home/konditer/pdf/"]
    for directory in directories:
        file_path = os.path.join(directory, file_name)
        if os.path.exists(file_path):
            return file_path
    return None

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID
@dp.message_handler(content_types=['text'])
async def handle_gift_car_request(message: types.Message):
    user_input = message.text.strip()

    try:
        # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        requested_id = int(user_input)

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ receipt –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ id_loto
        receipt = db.get_receipt_by_id(requested_id)
        print(receipt)
        
        if not receipt:
            await message.reply("–§–∞–π–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        file_name = f"{receipt}"
        file_path = find_pdf_file(file_name)

        if file_path:
            await message.reply_document(InputFile(file_path))
        else:
            await message.reply("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö.")
    
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

